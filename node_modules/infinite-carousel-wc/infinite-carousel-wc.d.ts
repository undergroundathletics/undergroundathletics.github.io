export class InfiniteCarouselWc extends HTMLElement {
    _scrollContainer: HTMLElement;
    _slot1: HTMLElement;
    _slot2: HTMLElement;
    _slot3: HTMLElement;
    /** @type {1 | 2 | 3 | undefined}} */
    _current: 1 | 2 | 3 | undefined;
    /** @type {IntersectionObserver} */
    _observer: IntersectionObserver;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Goes to the next slot in the carousel.
     *
     * @memberof InfiniteCarouselWc
     */
    goNext(): void;
    /**
     * Goes to the previous slot in the carousel.
     *
     * @memberof InfiniteCarouselWc
     */
    goPrevious(): void;
    /**
     * Resets the slot order so that slot 1 is in the "current" position, slot 2
     * is in the "next" position, and slot 3 is in the "previous" position.
     *
     * @memberof InfiniteCarouselWc
     */
    reset(): void;
    /**
     * @param {string} prop
     *
     * @memberOf InfiniteCarouselWc
     */
    upgradeProperty(prop: string): void;
    get currentSlot(): 2 | 1 | 3;
    set lock(arg: boolean);
    get lock(): boolean;
    set vertical(arg: boolean);
    get vertical(): boolean;
    /**
     * @param {ChangeEventDetail} eventDetails
     *
     * @memberOf InfiniteCarouselWc
     */
    raiseNextEvent(eventDetails: ChangeEventDetail): void;
    /**
     * @param {ChangeEventDetail} eventDetails
     *
     * @memberOf InfiniteCarouselWc
     */
    raisePreviousEvent(eventDetails: ChangeEventDetail): void;
    /**
     * @param {SlotId} oldCurrentSlot
     * @param {SlotId} newCurrentSlot
     * @returns
     *
     * @memberOf InfiniteCarouselWc
     */
    setSlotOrder(oldCurrentSlot: SlotId, newCurrentSlot: SlotId): void;
    _lockScroll: boolean;
}
export type SlotId = 2 | 1 | 3;
export type ChangeEventDetail = {
    newCurrent: SlotId;
};
